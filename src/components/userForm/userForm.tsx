/* eslint-disable indent */
import { useForm, useFormContext } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import validationSchema from '@utils/validation/validationShema'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
import { UserFormUI } from '@ui/userForm/userFormUI';
import { TFormValues, TUser } from 'types/types';
import { Button, Form, Modal, Space } from 'antd';
import { useEffect } from 'react';
import { localupdateUser } from '@utils/api/users';
import { useAppDispatch, useAppSelector } from '@utils/store';
import { closeDrawer } from '@utils/slices/drawerSlice';
import { addUser, updateUser } from '@utils/slices/usersSlice';
import _, { update } from 'lodash';

interface UserFormProps {
  user?: TUser;
}

export const UserForm: React.FC<UserFormProps> = ({ user }) => {
  const dispatch = useAppDispatch();
  const {
    control,
    handleSubmit,
    watch,
    reset,
    formState: { errors },
  } = useForm<TFormValues>({
    resolver: yupResolver(validationSchema),
    defaultValues: user
      ? {
          user: user.full_name,
          gender:
            user.gender === '–ú—É–∂—Å–∫–æ–π' || user.gender === '–ñ–µ–Ω—Å–∫–∏–π'
              ? user.gender
              : undefined,
          role:
            user.role === '–î–æ–∫—Ç–æ—Ä' ||
            user.role === '–ú–µ–¥–±—Ä–∞—Ç' ||
            user.role === '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞'
              ? user.role
              : undefined,
          birthDate: user.birthDate,
        }
      : undefined,
  });

  // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ user
  useEffect(() => {
    reset(
      user
        ? {
            user: user.full_name,
            gender:
              user.gender === '–ú—É–∂—Å–∫–æ–π' || user.gender === '–ñ–µ–Ω—Å–∫–∏–π'
                ? user.gender
                : undefined,
            role:
              user.role === '–î–æ–∫—Ç–æ—Ä' ||
              user.role === '–ú–µ–¥–±—Ä–∞—Ç' ||
              user.role === '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞'
                ? user.role
                : undefined,
            birthDate: user.birthDate,
          }
        : {
            user: undefined,
            gender: undefined,
            role: undefined,
            birthDate: '',
          }, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    );
  }, [user, reset]);

  const gender = watch('gender'); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "–ü–æ–ª"
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const _user = useAppSelector((state) => state.drawer.user);
  const task = useAppSelector((state) => state.drawer.isRedacting);

  const handleAction = (user: TUser) => {
    if (task) {
      dispatch(updateUser(user));
    } else {
      dispatch(addUser(user));
    }
  };
  const handleFormSubmit = async (data: TFormValues) => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FormData –≤ TUser
    const newUser: Partial<TUser> = {
      id: _user?.id,
      email: _user?.email,
      first_name: _user?.first_name,
      last_name: _user?.last_name,
      full_name: `${_user?.first_name} ${_user?.last_name}`,
      gender: data.gender,
      role: data.role,
      birthDate: data.birthDate,
      avatar: _user?.avatar,
    };
    // dispatch(addUser(newUser as TUser));
    handleAction(newUser as TUser);

    localupdateUser(newUser.id as number);
    reset();
    dispatch(closeDrawer());
    Modal.success({
      title: `–£—Å–ø–µ—à–Ω–æ üëç`,
      onOk: () => {},
    });
  };
  const usersState = useAppSelector((state) => state.users);
  console.log(usersState);
  return (
    <Form layout="vertical" onFinish={handleSubmit(handleFormSubmit)}>
      <UserFormUI control={control} errors={errors} gender={gender} />
      <Form.Item>
        <Space style={{ marginTop: 16 }}>
          <Button type="primary" htmlType="submit">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button htmlType="reset" onClick={() => reset()}>
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
        </Space>
      </Form.Item>
    </Form>
  );
};
